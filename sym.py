from matplotlib import pyplot
from sympy import *
import numpy as np
# import usdot

def get_E():
    I0 = Symbol( "I0" )
    l1 = Symbol( "l1" )
    l2 = Symbol( "l2" )
    c0 = Symbol( "c0" ) # position du 1er dirac
    d1 = Symbol( "d1" ) # Ã©cart entre les diracs
    c1 = c0 + d1
    I1 = I0 + l1
    I2 = I1 + l2

    E = + I2 * ( I2 - 2 * c1 ) \
        + I0 * ( 2 * c0 - I0 ) \
        + 2 * I1 * ( c1 - c0 )

    E = expand( E )
    E = collect( E, I0 )
    E = collect( E, c0 )
    print( E )

# get_E()
# E = 2 * I0 * ( l1 + l2 ) - 2 * c0 * ( l1 + l2 ) - 2 * d1 * l2 + ( l1 + l2 ) * ( l1 + l2 )
# E = ( l1 + l2 ) * ( 2 * ( I0 - c0 ) + l1 + l2 ) - 2 * d1 * l2

# E( c0 ) = ( l1 + l2 ) * ( l1 + l2 ) - 2 * d1 * l2

# E = 2 * I0 * ( l1 + l2 ) - 2*c0*l1 - 2*c1*l2 + ( l1 + l2 ) ^ 2

# E = 2 * ( c1 - c0 ) * o1 + o2 * ( o2 + 2 * ( I0 - c1 ) )

# 2 * o1 *( c1 - c0 ) + o2 * ( o2 * 2*I0 - 2*c1)
# x = Symbol( "x" )
# x0 = Symbol( "x0" )
# x1 = Symbol( "x1" )
# dy = Symbol( "dy" )
# y0 = Symbol( "y0" )
# y1 = Symbol( "y1" )
# print( solve( ( x - x0 ) * ( y0 + y1 / ( x1 - x0 ) * ( ( x + x0 ) / 2 - x0 ) ) - dy, x ) )
# v = np.array([ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 14, 1, 1, 13, 1, 1, 1, 1, 1, 44, 17, 68, 1, 1, 1, 1, 1, 1, 1, 1, 70, 36, 16, 1, 1, 1, 1, 182, 18, 21, 1, 1, 1, 1, 18, 25, 1, 14, 54, 1, 1, 14, 1, 44, 1, 1, 23, 23, 1, 1, 24, 156, 1, 31, 1, 30, 30, 70, 1, 1, 1, 1, 47, 23, 33, 1, 163, 1, 1, 1, 14, 1, 60, 31, 1, 40, 1, 50, 1, 1, 174, 65, 1, 69, 1, 1, 1, 1, 1, 106, 51, 1, 1, 38, 78, 37, 1, 1, 1, 1, 1, 101, 1, 56, 1, 44, 33, 20, 1, 38, 18, 34, 1, 1, 1, 26, 1, 1, 1, 1, 64, 1, 1, 58, 30, 63, 32, 28, 83, 1, 34, 1, 65, 91, 1, 30, 1, 89, 1, 57, 1, 165, 28, 1, 99, 33, 1, 58, 96, 31, 1, 1, 133, 1, 1, 60, 1, 1, 1, 1, 1, 1, 70, 1, 1, 73, 44, 1, 1, 1, 1, 1, 51, 1, 167, 105, 1, 1, 61, 1, 1, 1, 61, 72, 1, 1, 1, 110, 32, 1, 1, 88, 58, 1, 1, 1, 1, 49, 110, 1, 1, 1, 1, 1, 1, 80, 38, 1, 1, 57, 1, 59, 49, 1, 65, 43, 1, 1, 1, 1, 1, 1, 77, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 63, 1, 1, 1, 26, 1, 1, 47, 1, 1, 1, 1, 1, 50, 1, 1, 1, 97, 1, 1, 1, 1, 1, 1, 1, 1, 1, 115, 1, 1, 1, 131, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 60, 33, 1, 1, 1, 78, 1, 1, 1, 1, 1, 76, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 47, 1, 1, 1, 1, 1, 87, 1, 40, 1, 93, 55, 68, 1, 99, 84, 1, 211, 1, 1, 1, 1, 1, 1, 77, 1, 1, 1, 1, 141, 1, 1, 1, 1, 1, 40, 1, 1, 1, 1, 1, 1, 1, 92, 1, 55, 1, 1, 1, 1, 100, 1, 1, 1, 63, 1, 1, 1, 1, 1, 1, 1, 127, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 67, 1, 1, 1, 1, 1, 1, 1, 1, 81, 1, 1, 83, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 50, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 71, 1, 1, 1, 1, 58, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 77, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 146, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 146, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 74, 1, 1, 77, 1, 1, 1, 1, 1, 1, 1, 1, 41, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 210, 1, 1, 1, 1, 1, 1, 1, 1, 1, 58, 1, 119, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 96, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 230, 1, 1, 1, 112, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 102, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 93, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 130, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 70, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 231, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 47, 1, 1, 1, 1, 1, 1, 1, 67, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 155, 64, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 292, 1, 1, 1, 1, 130, 1, 1, 1, 1, 199, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 107, 1, 1, 1, 1, 1, 102, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 75, 1, 1, 1, 88, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 87, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 61, 1, 1, 1, 1, 1, 107, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 59, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 59, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 47, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ])
# print( np.sum( v - ( v == 1 ) ) / np.sum( v ) )
# u = [ i for i in v if i > 1 ]

# pyplot.hist( u, bins = 64 )
# pyplot.show()
M = np.array( [
  [ 2.849282e+01, -2.844444e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 ],
  [ -2.844444e+01, 4.266667e+01, -1.422222e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 ],
  [ 0.000000e+00, -1.422222e+01, 2.370370e+01, -9.481481e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 ],
  [ 0.000000e+00, 0.000000e+00, -9.481481e+00, 1.659259e+01, -7.111111e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 ],
  [ 0.000000e+00, 0.000000e+00, 0.000000e+00, -7.111111e+00, 1.280000e+01, -5.688889e+00, 0.000000e+00, 0.000000e+00 ],
  [ 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, -5.688889e+00, 1.042963e+01, -4.740741e+00, 0.000000e+00 ],
  [ 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, -4.740741e+00, 8.804233e+00, -4.063492e+00 ],
  [ 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, -4.063492e+00, 4.113574e+00 ]
] )
V = [ 8.300967e-01, 6.250000e-01, 3.750000e-01, 1.250000e-01, -1.250000e-01, -3.750000e-01, -6.250000e-01, -8.481987e-01 ]
import scipy.linalg

# print( M )
l, d, perm = scipy.linalg.ldl( M )
# for i in range( 1, ldl[ 0 ].shape[ 0 ] ):
#     # print( ldl[ 0 ][ i, i-1 ] )
#     print( ldl[ 1 ][ i, i ] )
# print( l )
# print( d )
print( scipy.linalg.solve( M, V ) )
